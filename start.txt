#include "glass/hnsw/hnsw.hpp"
#include "glass/searcher.hpp"


template <typename T>
void load_fvecs(const char *filename, T *&p, int64_t &n, int64_t &dim) {
  std::ifstream fs(filename, std::ios::binary);

  int dim_32;
  fs.read((char *)&dim_32, 1);
  dim = dim_32;
  fs.seekg(0, std::ios::end);
  n = fs.tellg() / (4 + dim * sizeof(T));
  fs.seekg(0, std::ios::beg);
  std::cout << "Read path: " << filename << ", nx: " << n << ", dim: " << dim
            << std::endl;
  p = reinterpret_cast<T *>(aligned_alloc(64, n * dim * sizeof(T)));
  for (int i = 0; i < n; ++i) {
    fs.seekg(4, std::ios::cur);
    fs.read((char *)&p[i * dim], dim * sizeof(T));
  }
}

float* fvecs_read(const char* fname, size_t* d_out, size_t* n_out) {
    FILE* f = fopen(fname, "r");
    if (!f) {
        fprintf(stderr, "could not open %s\n", fname);
        perror("");
        abort();
    }
    int d;
    fread(&d, 1, sizeof(int), f);
    assert((d > 0 && d < 1000000) || !"unreasonable dimension");
    fseek(f, 0, SEEK_SET);
    struct stat st;
    fstat(fileno(f), &st);
    size_t sz = st.st_size;
    assert(sz % ((d + 1) * 4) == 0 || !"weird file size");
    size_t n = sz / ((d + 1) * 4);

    *d_out = d;
    *n_out = n;
    float* x = new float[n * (d + 1)];
    size_t nr = fread(x, sizeof(float), n * (d + 1), f);
    assert(nr == n * (d + 1) || !"could not read whole file");

    // shift array to remove row headers
    for (size_t i = 0; i < n; i++)
        memmove(x + i * d, x + 1 + i * (d + 1), d * sizeof(*x));

    fclose(f);
    return x;
}

// not very clean, but works as long as sizeof(int) == sizeof(float)
int* ivecs_read(const char* fname, size_t* d_out, size_t* n_out) {
    return (int*)fvecs_read(fname, d_out, n_out);
}







// 从文件中读取一维 float 数组并返回指针
float* readFloatArrayFromFile(const char* filename, size_t size) {
    std::ifstream file(filename, std::ios::binary | std::ios::ate); // 以二进制模式打开文件，并定位到文件末尾

    // 检查文件是否成功打开
    if (!file.is_open()) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return nullptr;
    }

    // 获取文件大小
    size = file.tellg() / sizeof(float); // 文件大小除以 float 大小，得到数组大小
    file.seekg(0, std::ios::beg); // 将文件指针重新定位到文件开头

    // 创建适当大小的 float 数组
    float* floatArray = new float[size];

    // 从文件中读取数据到数组中
    file.read(reinterpret_cast<char*>(floatArray), size * sizeof(float));

    // 检查是否成功读取数据
    if (!file) {
        std::cerr << "Failed to read data from file: " << filename << std::endl;
        delete[] floatArray; // 释放动态分配的数组内存
        return nullptr;
    }

    // 关闭文件
    file.close();

    return floatArray; // 返回指向动态分配数组的指针
}

// 将 vector 中的数据写入二进制文件
void writeVectorToBinaryFile(const std::string& filename, const std::vector<int>& data) {
    std::ofstream file(filename, std::ios::binary); // 以二进制模式打开文件

    // 检查文件是否成功打开
    if (!file.is_open()) {
        std::cerr << "Failed to open file: " << filename << std::endl;
        return;
    }

    // 将 vector 中的数据写入文件
    file.write(reinterpret_cast<const char*>(data.data()), data.size() * sizeof(int));

    // 检查是否成功写入数据
    if (!file) {
        std::cerr << "Failed to write data to file: " << filename << std::endl;
    }

    // 关闭文件
    file.close();
}


int main(int argc, char **argv) {
  if (argc < 8) {
    printf("Usage: ./main base_path query_path gt_path graph_path level "
           "topk search_ef num_threads\n");
    exit(-1);
  }
  std::string base_path = argv[1];
  std::string query_path = argv[2];
  std::string gt_path = argv[3];
  std::string graph_path = argv[4];
  int level = std::stoi(argv[5]);
  int topk = std::stoi(argv[6]);
  int search_ef = std::stoi(argv[7]);
  int num_threads = 1;
  int iters = 100;
  if (argc >= 9) {
    num_threads = std::stoi(argv[8]);
  }
  if (argc >= 10) {
    iters = std::stoi(argv[9]);
  }

  size_t dim, gt_k, nq, N;
  float* base = fvecs_read("data_cpp/sift/sift_base.fvecs", &dim, &N);

  //dim = 128;
  //N = 10000;
  //float* base = readFloatArrayFromFile("data_cpp/sift/centroids2.bin", N);

  float* query = fvecs_read("data_cpp/sift/sift_query.fvecs", &dim, &nq);
  int* gt = ivecs_read("data_cpp/sift/sift_groundtruth.ivecs", &gt_k, &nq);

  //std::cout << N << std::endl;

//构建
  if (!std::filesystem::exists(graph_path)) {
      glass::HNSW hnsw(dim, "L2", 32, 200);
      hnsw.Build(base, N);
//保存
      hnsw.final_graph.save(graph_path);
  }
//加载
  glass::Graph<int> graph;
  graph.load(graph_path);
//搜索
  auto searcher = glass::create_searcher(graph, "L2", level);
  searcher->SetData(base, N, dim);
  searcher->Optimize(num_threads);
  searcher->SetEf(search_ef);
  double recall;
  double best_qps = 0.0;

  size_t preTime = 0;

  for (int iter = 1; iter <= iters; ++iter) {
      printf("iter : [%d/%d]\n", iter, iters);
      std::vector<int> pred(nq * topk);
      auto st = std::chrono::high_resolution_clock::now();
#pragma omp parallel for schedule(dynamic) num_threads(num_threads)
    for (int i = 0; i < nq; ++i) {
      searcher->Search(query + i * dim, topk, pred.data() + i * topk);
    }
    if(preTime==0){
        preTime++;
        writeVectorToBinaryFile("data_cpp/res/pred8192_0.bin", pred);
    }
    auto ed = std::chrono::high_resolution_clock::now();
    auto ela = std::chrono::duration<double>(ed - st).count();
    double qps = nq / ela;
    best_qps = std::max(qps, best_qps);
    int cnt = 0;

    for (int i = 0; i < nq; ++i) {
        std::unordered_set<int> st(gt + i * gt_k, gt + i * gt_k + topk);
        for (int j = 0; j < topk; ++j) {
            if (st.count(pred[i * topk + j])) {
                cnt++;
            }
        }
    }

    recall = (double)cnt / nq / topk;
    printf("\tRecall@%d = %.4lf, QPS = %.2lf\n", topk, recall, qps);
  }
  printf("Best QPS = %.2lf\n", best_qps);
  free(base);
  free(query);
  free(gt);
}